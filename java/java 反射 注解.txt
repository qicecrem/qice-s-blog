反射：加载类，并允许以编程的方式解剖类中的各种成分（成员变量、方法、构造器等）。
第一步：加载类，获取类的字节码：Class对象
     三种方式：
        Class c1=类名.class;
        调用class提供方法：public static Class forName(String package)
        Object提供的方法：public Class getClass();  Class c2=对象.getClass();
第二步：获取类的构造器
        二种方式：
            Constructor[] constructors=类名.getDeclaresConstructors();
            Constructor constructor=类名.getDeclaredConstructor(参数类型列表);
        作用：初始化对象返回
             Constructor提供方法：
                 T newInstance(Object... initargs)：调用此构造器对象表示的构造器，并传入参数，完成对象的初始化并返回。
                 public void setAccessible(boolean flag)：设置为true，表示禁止检查访问控制（暴力反射）

第三步：获取类的成员变量
          Field[] fields=类名.getDeclaredFields()
          Field field=类名.getDeclaredField(成员变量名)
        作用：赋值，取值
             void set(Object obj,Object value)：设置成员变量的值
             Object get(Object obj)：获取成员变量的值
             public void setAccessible(boolean flag)：设置为true，表示禁止检查访问控制（暴力反射）
第四步：获取类的成员方法
          Method[] methods=类名.getDeclaredMethods()
          Method method=类名.getDeclaredMethod(方法名,参数类型列表)
          成员方法：
             public object invole(Object obj,Object... args)：调用此方法，并传入参数，完成方法的调用并返回结果。
             public void setAccessible(boolean flag)：设置为true，表示禁止检查访问控制（暴力反射）

反射的作用：
    基本作用:可以得到一个类的全部成分然后操作。
    可以破坏封装性
    适合做java框架
    

注解：Java中的特殊代码。作用：让其他程序根据注解信息决定来怎么执行该程序。
  public @interface MyAnnotation {
      public 属性类型 属性名（） default 默认值；
  }
   特殊属性名：value
    如果注解中只有一个value属性，使用注解时value名称就可以不写。
注解本质是一个接口，java中所有注解都是继承Annotation接口。
@注解（...）：其实就是一个实现类对象实现了该注解以及Annotation接口。

元注解：注解的注解，用来注解注解。
  @Target 作用：修饰注解在哪些位置
     @Target(ElementType.TYPE)
     1.TYPE 类，接口
     2.FIELD 成员变量
     3.METHOD 成员方法
     4.PARAMETER 方法参数
     5.CONSTRUCTOR 构造器
     6.LOCAL_VARIABLE 局部变量
   
  @Retention 作用：神么注解的保留周期
     @Retention(RetentionPolicy.RUNTIME)
     1.SOURCE  作用在源码阶段，字节码文件中不存在
     2.CLASS  作用在编译阶段，字节码文件中存在，但运行时无法获得
     3.RUNTIME 作用在运行阶段，字节码文件中存在，并且运行时可以获得。

 注解的解析：判断类，方法，成员变量是否有注解，并把注解的内容解析出来。
 要解析类上的注解，应先获得类的Class对象，再通过Class对象解析上面的注解
要解析成员方法的注解，应先获得方法的Method对象，再通过Method对象解析上面的注解    
Class，Method，Field，Constructor都实现了AnnotatedElement接口，都有解析注解的方法。
Annotation接口提供了获取注解的属性的方法：
    public Annotation[] getDeclaredAnnotations()：获取当前对象上面的注解
    public T getDeclaredAnnotation(Class<T> annotationClass)：获取当前对象上面的指定类型的注解
    public boolean isAnnotationPresent(Class<Annotation> annotationClass)：判断当前对象是否有指定类型的注解

代理：
  Java.lang.reflect.Proxy类：提供了为对象产生代理对象的方法。
  public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)
  参数一：用于指定用哪个类加载器，去加载生成的代理类。
  参数二：指定接口，这些接口用于指定生成的代理长什么，也就是哪些方法。
  参数三：用于指定代理对象要干什么事。
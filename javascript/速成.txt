控制台打印：console.log(data);
变量提升：所有变量声明语句都会被提升到当前作用域的顶部，但不会提升赋值操作。
js的引入方式：
（1）嵌入到HTML中
    <body>
       <script>
       var a = 1;
       </script>
    </body>

（2）引入本地js文件
    <body>
       <script type="text/javascript"  src="./index.js"> </script>
    </body>

（3）引入远程js文件
    <body>
       <script type="text/javascript"  src="http://www.baidu.com/index.js"> </script>
    </body>

    注释：
    单行注释：//
    多行注释：/* */

    输出方式：
    alert()：弹出警告框
    console.log()：控制台打印
    document.write()：在页面中输出

合成类型：、
对象：由多种原始类型组成。
var obj={
    name:"张三",
    age:18,
    sex:"男",
    learn:true
}；

null 和 undefined 的区别：
null 表示一个空对象指针，表示对象为空。
undefined 表示未定义，表示变量声明了，但是没有赋值。

typeof 运算符：返回一个表示表达式数据类型的字符串。

三元运算符：（条件）？（条件为真时执行的语句）：（条件为假时执行的语句）

长字符串要分成多行，可在每一行末尾加上反斜杠(\)，表示下一行与本行连接。
var str = "这是一段非常长的字符串，\
我们可以使用反斜杠进行分行。";

字符串操作
.length: 返回字符串的长度
.charAt(index): 返回指定位置的字符
.indexOf(substring): 返回指定字符串首次出现的位置，找不到返回 -1
.substring(startIndex, endIndex): 返回指定索引区间的字符串，不包含结束索引的字符
.substr(startIndex, length): 返回指定索引区间的字符串
.concat(string1, string2, ...): 连接两个或多个字符串
.trim(): 去除字符串两端的空格
.split(separator): 将字符串分割为字符串数组

数组操作
Array.isArray(array): 判断是否为数组，返回布尔值
.push(element): 向数组末尾添加一个或多个元素，返回新数组的长度
.pop(): 删除数组最后一个元素，返回被删除的元素
.shift(): 删除数组第一个元素，返回被删除的元素
.unshift(element): 向数组开头添加一个或多个元素，返回新数组的长度
.join(separator): 将数组转换为字符串
.reverse(): 反转数组

函数
函数的声明：function 函数名(参数1,参数2,...)
            {
             函数体           
             }
函数名的提升：函数声明会被提升到当前作用域的顶部，但是不会提升赋值操作。

Math 对象方法
Math.abs(x): 返回 x 的绝对值
Math.max(x, y, ...): 返回一组数中的最大值
Math.min(x, y, ...): 返回一组数中的最小值
Math.floor(x): 向下取整
Math.ceil(x): 向上取整
Math.round(x): 四舍五入
Math.random(): 返回一个 0 到 1 之间的随机数
Math.pow(x, y): 返回 x 的 y 次方
Math.sqrt(x): 返回 x 的平方根

Date 对象方法
Date.now(): 返回当前时间戳
new Date(): 返回当前时间
Date.parse(dateString): 解析日期字符串，返回时间戳
Date.UTC(year, month, day, hours, minutes, seconds, milliseconds): 返回 UTC 时间戳
.getDate(): 返回日期对象的日期
.getDay(): 返回日期对象的星期几（0-6，星期日为0）
.getFullYear(): 返回日期对象的年份（4位数）
.getMonth(): 返回日期对象的月份（0-11，0 为1月）
.getHours(): 返回日期对象的小时（0-23）
.getMinutes(): 返回日期对象的分钟（0-59）
.getSeconds(): 返回日期对象的秒数（0-59）


BOM（Browser Object Model）：浏览器对象模型，提供访问浏览器窗口和文档的方法和属性。
window对象：表示浏览器窗口。{
  获取：直接使用window，其中window可以省略。
  属性：
       history：对History对象只读引入。
       location：对Location对象只读引入。
       navigator：对Navigator对象只读引入。
  方法：
      alter(): 弹出警告框。
      confirm(): 弹出确认框，返回true或false。
      setInterval(): 定时执行函数。
      setTimeout(): 延迟执行函数。
      open(): 打开一个新的窗口或tab。
}
location对象：表示当前页面的URL。{
获取：windowlocation获取，windows可省略。
属性：
      href: 页面的完整URL。
      protocol: 页面的协议。
      host: 页面的主机名。
location.href="http://www.baidu.com"; // 跳转到指定页面


}
navigator对象：表示浏览器的信息。 
Screen对象：表示屏幕的大小和颜色。
History对象：表示浏览器的历史记录。



DOM 操作
DOM:文档对象模型，是W3C组织推荐的处理可扩展标记语言的标准编程接口。
DOM把整个页面映射为一个多层节点结构。

节点类型：
Document: 文档节点
DocumentType: 文档类型节点
Element: HTML 标签
Attribute: 元素属性
Text: 标签之间的文本
Comment: 注释
DocumentFragment: 文档片段


节点树：
一个文档的所有结点，按照所在的层级，可以抽象成一种树状结构。

浏览器原生提供document节点，代表整个文档。

Node.nodeType():返回节点的类型。
 
DOM操作： 
（1）获取元素：
document.getElementById(id): 根据 id 获取元素
document.getElementsByClassName(className): 根据 class 获取元素
document.getElementsByTagName(tagName): 根据标签名获取元素
document.getElementsByName(name): 根据 name 获取元素
document.querySelector(selector): 根据选择器获取第一个元素
document.querySelectorAll(selector): 根据选择器获取所有元素
（2）操作元素：
Element.id: 获取或设置元素的 id 属性
Element.className: 获取或设置元素的 class 属性
Element.classList.add(className): 添加一个 class
Element.classList.remove(className): 删除一个 class
Element.classList.toggle(className): 切换一个 class
Element.classList.contains(className): 判断是否包含某个 class
Element.innerHTML: 获取或设置元素的 HTML 内容
Element.innerText: 获取或设置元素的文本内容
Element.src: 获取或设置元素的 src 属性
Element.href: 获取或设置元素的 href 属性
Element.style: 获取或设置元素的样式
Element.getAttribute(attribute): 获取元素属性
Element.setAttribute(attribute, value): 设置元素属性
Element.removeAttribute(attribute): 删除元素属性
Element.appendChild(child): 在元素末尾添加子元素
Element.insertBefore(newElement, referenceElement): 在元素前面插入子元素
Element.removeChild(child): 删除子元素
Element.replaceChild(newChild, oldChild): 替换子元素
Element.addEventListener(event, function): 添加事件监听器
Element.removeEventListener(event, function): 移除事件监听器
Element.dispatchEvent(event): 触发事件
Element.focus(): 使元素获得焦点
Element.blur(): 使元素失去焦点
Element.scrollIntoView(): 使元素滚动到可见区域
Element.scrollTo(x, y): 使元素滚动到指定位置
Element.scrollBy(x, y): 使元素滚动指定距离
Element.scroll(options): 使元素滚动到指定位置


（3）创造元素：
document.createElement()：创建元素节点并返回。
document.createTextNode()：创建文本节点并返回。
document.createAttribute()：创建属性节点并返回。

（4）Element获取元素位置
Element.clientHeight: 返回元素高度（包括内边距）
Element.clientWidth: 返回元素宽度（包括内边距）
Element.scrollHeight: 返回元素高度（包括内边距、边框和滚动条）
Element.scrollWidth: 返回元素宽度（包括内边距、边框和滚动条）
Element.scrollLeft: 返回元素水平滚动条向右滚动的像素数
Element.scrollTop: 返回元素垂直滚动条向下滚动的像素数
Element.offsetHeight: 返回元素高度（包括内边距、边框和滚动条）
Element.offsetWidth: 返回元素宽度（包括内边距、边框和滚动条）
Element.offsetLeft: 返回元素左上角相对于父元素的水平偏移量
Element.offsetTop: 返回元素左上角相对于父元素的垂直偏移量

(5)css 操作：
Html元素的style属性：使用网页元素节点的setAttribute()方法，可以修改元素的style属性。div.setAttribute('style', 'color: red;');   
元素节点的style属性：使用网页元素节点的style属性，可以修改元素的style属性。div.style.color = 'red';
cssText属性：使用网页元素节点的style属性，可以修改元素的style属性。div.style.cssText = 'color: red;';

事件处理程序：
HTML事件处理程序：<button onclick="alert('Hello World!');">点我</button>
DOM0级事件处理程序：<button id="btn">点我</button><script>var btn = document.getElementById('btn');btn.onclick = function() {alert('Hello World!');};</script>( 优点：HTML和JS分离;无法同时添加多个事件)
DOM2级事件处理程序：<button id="btn">点我</button><script>var btn = document.getElementById('btn');btn.addEventListener('click', function() {alert('Hello World!');});</script>( 优点：HTML和JS分离;可以同时添加多个事件)

鼠标事件：
lick: 鼠标单击时触发
dblclick: 鼠标双击时触发
mousedown: 鼠标按下时触发
mouseup: 鼠标松开时触发
mousemove: 鼠标移动时触发
mouseover: 鼠标移入时触发
mouseout: 鼠标移出时触发
mouseenter: 鼠标移入时触发
mouseleave: 鼠标移出时触发
wheel: 鼠标滚轮滚动时触发

Event事件对象：
Event.Target：返回事件当前所在节点。
Event.Type：返回事件类型。

Event对象方法:
Event.preventDefault()：阻止事件的默认行为。
Event.stopPropagation()：阻止事件冒泡。

键盘事件：
keydown：键盘按下时触发。
keyup：键盘松开时触发。
keypress：键盘按下有值键时触发。
.keycode:返回按键的ASCII码。

表单事件：
input: 输入框输入时触发
select: 选择框选择时触发
change: 修改完成时触发
submit: 表单提交时触发
reset: 表单重置时触发

事件代理：
事件代理是指将事件绑定到父元素上，当子元素触发事件时，
通过事件冒泡机制，将事件传递给父元素，由父元素来处理事件。

定时器：
setTimeout(function,time)：在指定时间后执行一次函数。var timerId=setTimeout(function(){alert('Hello World!');},1000);
clearTimeout(timerId)：清除定时器。
setInterval(function,time)：每隔指定时间执行一次函数。var timerId=setInterval(function(){alert('Hello World!');},1000);
clearInterval(timerId)：清除定时器

防抖：
防抖是指在事件触发后，延迟一段时间再执行函数，如果在这段时间内再次触发事件，
则重新计时。

节流：
节流是指在事件触发后，每隔一段时间执行一次函数，如果在这段时间内再次触发事
件，则不执行函数。

// 防抖函数
function debounce(func, wait) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), wait);
  };
}

// 节流函数
function throttle(func, wait) {
  let lastTime = 0;
  return function(...args) {
    const now = new Date().getTime();
    if (now - lastTime >= wait) {
      lastTime = now;
      func.apply(this, args);
    }
  };
}


Vue是一套前端框架，免除原生JavaScript操作DOM的复杂性，提供了数据绑定、组件系统、路由系统等功能，将变成关注点放在数据上。
Vue快速入门：
新建HTML文件，引入Vue.js文件。
<script src="js/vue.js"></script>

在js代码区，创建Vue核心对象，定义数据模型
<script>
       new Vue({
           el:"app"
           data:{
            message:"Hello Vue!"
           }
       })
</script>

编写视图
<div id="app">
<input type="text" v-model="message">
{{message}}
</div>

插值表达式
形式：{{表达式}}
内容可以是：
变量
三元运算符
函数调用
算术运算

常用表达式：
v-bind： 为HTML标签绑定属性值，如设置href，css样式等。{<a v-bind:href="url">链接</a> 或 <a :href="url">链接</a>}
v-model：在表单创建双向数据绑定。{<input type="text" v-model="url">}
v-on：为HTML标签绑定事件处理程序。{<input type="button" value="点我" v-on:click="handle()"> 或 <input type="button" value="点我" @click="handle()">}
v-if v-else-if v-else： 条件性的渲染某元素，判断为true是渲染否则不渲染
v-show：根据条件展示某元素，区别在于切换的display属性的值(不显示但会渲染)
v-for： 列表渲染，遍历容器的元素或对象属性。

vue生命周期：
mounted：组件被挂载完成时触发（发送请求到服务端，加载数据）

Ajax：
作用：数据交换：通过Ajax可以给服务器发送请求，从服务器获取数据，并更新到页面上。
异步交换：可以在不重新加载页面的情况下，与服务器交换数据并更新部分网页的数据，如：搜索联想，用户名是否可用，邮箱是否注册等。
Axios：对原生的Ajax进行了封装，简化书写，快速开发。

Axios入门：
1.引入Axios.js文件。
<script src="js/axios.js"></script>
2.使用Axios发送请求，并获响应结果
axios({
  method: 'get',\
  url: 'https://www.example.com/api/data',\
}).then((result)=>{
  console.log(result.data);
});
axios({
  method: 'post',
  url: 'https://www.example.com/api/data',
  data: {
    name: '张三',
    age: 18
  }
}).then((result)=>{
  console.log(result.data);
})
Axios请求方式别名：
axios.get(url, [,config])
axios.delete(url, [,config])
axios.post(url, data[,config])
axios.put(url, data[,config])
发送GET请求：
axios.get('https://www.example.com/api/data').then((result)=>{
  console.log(result.data);
});
发送POST请求：
axios.post('https://www.example.com/api/data', {
  name: '张三',
  age: 18
}).then((result)=>{
  console.log(result.data);
});

